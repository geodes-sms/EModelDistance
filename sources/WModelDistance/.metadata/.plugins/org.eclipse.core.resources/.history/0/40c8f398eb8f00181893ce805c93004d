package PacmanGame.search;

import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;

public interface IDistanceUtil {
	
	/**
	 * Returns the movable object types of your metamodel.
	 * An object is movable if, when analyzing the rules,
	 * it has a reference to a position object and the rules modify that reference.
	 * Note that it could also be that a position object references a movable object.
	 * @return the set of class names for movable types
	 */
	public Set<String> getMovableTypes();

	/**
	 * Returns the position object types of your metamodel.
	 * An object is a position if, when analyzing the rules,
	 * it is what movable objects are always linked to.
	 * Note that it could also be that a position object references a movable object.
	 * @return the set of class names for position types
	 */
	public Set<String> getPositionTypes();

	/**
	 * Returns the unique identifier that characterizes a position or movable object.
	 * @param object a position or movable object
	 * @return the identifier value
	 */
	public Object getId(EObject object);

	/**
	 * Accesses the position of a movable object.
	 * @param movable
	 * @return the position object on which movable is placed
	 */
	public EObject getPosition(EObject movable);

	/**
	 * Accesses all neighboring position objects.
	 * @param position the current position object
	 * @return the list of the other position objects position is linked to
	 */
	public List<EObject> getPositionNeighbors(EObject position);
	
	/**
	 * Returns all movable objects in the model.
	 * @param root is the root object of the model from which we can access all the objects in the model.
	 * @return list of all movable objects
	 */
	public List<EObject> getMovableObjects(EObject root);
	
	/**
	 * Returns all position objects in the model.
	 * @param root is the root object of the model from which we can access all the objects in the model.
	 * @return list of all position objects
	 */
	public List<EObject> getPositionObjects(EObject root);
	
	/**
	 * Returns the movable object in model that has the same ID as movable (see {@link getId})
	 * @param movable the movable object to 
	 * @param model
	 * @return
	 */
	public EObject getMovableInModel(EObject movable, EObject model);
	
	public EObject getRoot(EObject o);
}