package icmt.tool.momot.demo

import at.ac.tuwien.big.momot.^search.^fitness.dimension.TransformationLengthDimension
import at.ac.tuwien.big.moea.^experiment.executor.listener.SeedRuntimePrintListener
import at.ac.tuwien.big.moea.util.MathUtil
import org.moeaframework.core.operator.TournamentSelection
import org.moeaframework.core.operator.OnePointCrossover
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationPlaceholderMutation
import PacmanGame.PacmanGamePackage
import java.io.File
import PacmanGame.^search.PacmanGameMoveDistance

initialization = {
   PacmanGamePackage.eINSTANCE.eClass // register package
   PacmanGameMoveDistance.initWith(new File("models/M2.xmi"));
   System.out.println("Search started.");
}

search = {
   model          = {
      file       = "models/M1.xmi"
   }
   
   solutionLength  = 30 // at most 30 orchestrated transformation units

   transformations = {
      modules = [ "transformation/move_up.henshin",
	      "transformation/eat.henshin",
	      "transformation/kill.henshin",
	      "transformation/move_down.henshin",
	      "transformation/move_left.henshin",
	      "transformation/move_right.henshin"
      ]
   }

   fitness         = {
      objectives = {
         SolutionLength : minimize new TransformationLengthDimension
         Distance: minimize {PacmanGameMoveDistance.calculateFitness(root)}
         
      }
   }

   algorithms      = {
      //Random  : moea.createRandomSearch()
      NSGAIII : moea.createNSGAII()
      eMOEA   : moea.createEpsilonMOEA()
   }
}

experiment = {
   populationSize    = 100
   maxEvaluations    = 10000
   nrRuns            = 1
   progressListeners = [ new SeedRuntimePrintListener ]
}

analysis = {
   indicators       = [ hypervolume invertedGenerationalDistance ]
   significance     = 0.01
   show             = [ aggregateValues statisticalSignificance individualValues ]
   outputFile       = "output/analysis/analysis.txt"
   boxplotDirectory = "output/analysis/"
   printOutput
}

results = {
   adaptModels = {
      
   }
   
   // save objectives
   objectives = {
      outputFile      = "output/objectives/objective_values.txt"
      printOutput
   }
   
   /*objectives = {
      outputFile      = "output/objectives/random_objective_values.txt"
      algorithms      = [ Random ]
   }*/

   // save solutions, i.e., transformation orchestrations
   solutions  = {
      outputFile      = "output/solutions/all_solutions.txt"
      outputDirectory = "output/solutions/"
   }

   // save models resulting from the orchestrated transformations
   models     = {
      outputDirectory = "output/models/"
   }
   
   // select kneepoint models for further inspection
   models     = {
      neighborhoodSize = maxNeighborhoodSize
      outputDirectory  = "output/models/kneepoints/"
   }
}

finalization = {
   System.out.println("Search finished.");
}